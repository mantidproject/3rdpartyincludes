// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Standard_HeaderFile
#define _Standard_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Address_HeaderFile
#include <Standard_Address.hxx>
#endif
#ifndef _Standard_Size_HeaderFile
#include <Standard_Size.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class Standard_ErrorHandlerCallback;
class Standard_ErrorHandler;
class Standard_AncestorIterator;
class Standard_Storable;
class Standard_Persistent;
class Standard_GUID;
class Standard_Transient;
class Standard_Type;
class Standard_Failure;



class Standard  {
public:

  DEFINE_STANDARD_ALLOC

  //!  Allocates memory blocks <br>
//!           aSize - bytes to  allocate <br>
  Standard_EXPORT   static  Standard_Address Allocate(const Standard_Size aSize) ;
  //!  Deallocates memory blocks <br>
//!           aStorage - previously allocated memory block to be freed <br>
  Standard_EXPORT   static  void Free(const Standard_Address aStorage) ;
template <typename T> static inline void Free (T*& thePtr) { Free ((void*)thePtr); thePtr = 0; }
  //!  Reallocates memory blocks <br>
//!           aStorage - previously allocated memory block <br>
//!           aNewSize - new size in bytes <br>
  Standard_EXPORT   static  Standard_Address Reallocate(const Standard_Address aStorage,const Standard_Size aNewSize) ;
  //!  Deallocates the storage retained on the free list <br>
//!           and clears the list. <br>
//!           Returns non-zero if some memory has been actually freed. <br>
  Standard_EXPORT   static  Standard_Integer Purge() ;





protected:





private:




friend class Standard_ErrorHandlerCallback;
friend class Standard_ErrorHandler;
friend class Standard_AncestorIterator;
friend class Standard_Storable;
friend class Standard_Persistent;
friend class Standard_GUID;
friend class Standard_Transient;
friend class Standard_Type;
friend class Standard_Failure;

};





// other Inline functions and methods (like "C++: function call" methods)


#endif
